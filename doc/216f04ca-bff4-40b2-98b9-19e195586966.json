{
    "summary": "This code defines a \"Node\" class for CST tree representation and a batch handling class with properties like `tree`, `background`, `max_tokens`, and methods to handle batches, remove/process nodes, and create node batches from trees.",
    "details": [
        {
            "comment": "This code defines a class called \"Node\" which represents a node in a CST tree. It takes arguments such as the name of the node, the corresponding CST node, code of the node, and the number of tokens in the node. The class also has an initializer method to initialize a Node object using a given CST tree, node name, and response size.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":0-32",
            "content": "from dataclasses import dataclass, field\nfrom typing import List, Optional\nimport libcst as cst\nimport tiktoken\nfrom write_the.cst.docstring_remover import remove_docstrings\nfrom write_the.cst.node_extractor import extract_node_from_tree, extract_nodes_from_tree\nfrom write_the.cst.node_remover import remove_nodes_from_tree\nfrom write_the.cst.utils import get_code_from_node, nodes_to_tree\nfrom write_the.cst.function_and_class_collector import get_node_names\nclass Node:\n    \"\"\"\n    A class representing a node in a CST tree.\n    Args:\n      name (str): The name of the node.\n      node (cst.CSTNode): The CST node.\n      code (str): The code of the node.\n      tokens (int): The number of tokens in the node.\n    \"\"\"\n    name: str\n    node: cst.CSTNode\n    code: str\n    tokens: int\n    def __init__(self, *, tree, node_name, response_size=80) -> None:\n        \"\"\"\n        Initializes a Node object.\n        Args:\n          tree (cst.Module): The CST tree.\n          node_name (str): The name of the node.\n          response_size (int): The size of the response."
        },
        {
            "comment": "Class representing a Background node in CST tree.\nInitializes a Background object with a given CSTNode.\nEncodes the background code for tokenization and stores tokens count.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":33-67",
            "content": "        \"\"\"\n        self.node = extract_node_from_tree(tree=tree, node=node_name)\n        self.name = node_name\n        self.code = get_code_from_node(self.node)\n        encoding = tiktoken.encoding_for_model(\"gpt-4\")\n        self.tokens = len(encoding.encode(self.code)) + response_size\nclass Background(Node):\n    \"\"\"\n    A class representing a background in a CST tree.\n    Args:\n      body (cst.CSTNode): The CST node of the background.\n    \"\"\"\n    def __init__(self, body) -> None:\n        \"\"\"\n        Initializes a Background object.\n        Args:\n          body (cst.CSTNode): The CST node of the background.\n        \"\"\"\n        self.node = body\n        self.name = \"background\"\n        self.code = self.node.code\n        encoding = tiktoken.encoding_for_model(\"gpt-4\")\n        self.tokens = len(encoding.encode(self.code))\n@dataclass\nclass NodeBatch:\n    \"\"\"\n    A class representing a batch of nodes in a CST tree.\n    Args:\n      tree (cst.Module): The CST tree.\n      background (Optional[Background]): The background of the tree."
        },
        {
            "comment": "This code defines a class with properties and methods related to batches of nodes. The class has properties like `tree`, `background`, `max_tokens`, `prompt_size`, `nodes`, `max_batch_size`, and `send_node_context`. It also provides getter methods for `tokens` and `node_names`, which return the number of tokens in the batch and the names of nodes in the batch, respectively.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":68-99",
            "content": "      max_tokens (int): The maximum number of tokens in the batch.\n      prompt_size (int): The size of the prompt.\n      nodes (List[Node]): The list of nodes in the batch.\n      max_batch_size (Optional[int]): The maximum size of the batch.\n      send_node_context (bool): Whether to send the context of the nodes.\n    \"\"\"\n    tree: cst.Module\n    background: Optional[Background]\n    max_tokens: int\n    prompt_size: int\n    nodes: List[Node] = field(default_factory=list)\n    max_batch_size: Optional[int] = None\n    send_node_context: bool = False\n    @property\n    def tokens(self) -> int:\n        \"\"\"\n        Gets the number of tokens in the batch.\n        Returns:\n          int: The number of tokens in the batch.\n        \"\"\"\n        tokens = self.prompt_size + sum(n.tokens for n in self.nodes)\n        if self.background:\n            tokens += self.background.tokens\n        return tokens\n    @property\n    def node_names(self) -> List[str]:\n        \"\"\"\n        Gets the names of the nodes in the batch.\n        Returns:"
        },
        {
            "comment": "Returns a list of node names in the batch.\nCalculates available space in the batch.\nRetrieves code for the batch, depending on settings.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":100-130",
            "content": "          List[str]: The names of the nodes in the batch.\n        \"\"\"\n        return [n.name for n in self.nodes]\n    @property\n    def space_available(self) -> int:\n        \"\"\"\n        Gets the amount of space available in the batch.\n        Returns:\n          int: The amount of space available in the batch.\n        \"\"\"\n        return self.max_tokens - self.tokens\n    @property\n    def code(self):\n        \"\"\"\n        Gets the code of the batch.\n        Returns:\n          str: The code of the batch.\n        \"\"\"\n        if self.send_node_context:\n            # send everything\n            return self.tree.code\n        if self.background:\n            # remove all non batch nodes\n            all_nodes = get_node_names(self.tree, True)\n            classes_to_keep = [n.split(\".\")[0] for n in self.node_names if \".\" in n]\n            nodes_to_remove: List[str] = [\n                n for n in all_nodes if n not in self.node_names\n            ]\n            nodes_to_remove = [n for n in nodes_to_remove if n not in classes_to_keep]"
        },
        {
            "comment": "Code snippet 1: Removes specified nodes from the given tree and returns the processed tree.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":131-162",
            "content": "            processed_tree = remove_nodes_from_tree(self.tree, nodes_to_remove)\n        else:\n            # extract batch nodes\n            extracted_nodes = extract_nodes_from_tree(self.tree, self.node_names)\n            processed_tree = nodes_to_tree(extracted_nodes)\n        return processed_tree.code\n    def add(self, node: Node):\n        \"\"\"\n        Adds a node to the batch.\n        Args:\n          node (Node): The node to add.\n        Raises:\n          ValueError: If there is no space available in the batch.\n        \"\"\"\n        if self.space_available - node.tokens < 0 or (\n            self.max_batch_size and len(self.nodes) + 1 > self.max_batch_size\n        ):\n            raise ValueError(\"No space available in batch!\")\n        self.nodes.append(node)\ndef extract_background(tree):\n    \"\"\"\n    Extracts the background from a CST tree.\n    Args:\n      tree (cst.Module): The CST tree.\n    Returns:\n      Background: The background of the tree.\n    \"\"\"\n    all_node_names = get_node_names(tree, force=True)\n    background = remove_nodes_from_tree(tree, all_node_names)"
        },
        {
            "comment": "Creates batches of nodes from a tree with specified parameters.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":163-190",
            "content": "    return Background(body=background)\ndef create_batches(\n    tree,\n    node_names,\n    max_tokens,\n    prompt_size,\n    response_size_per_node,\n    max_batch_size=None,\n    send_background_context=True,\n    send_node_context=True,\n) -> List[NodeBatch]:\n    \"\"\"\n    Creates batches of nodes from a tree.\n    Args:\n      tree (cst.Module): The tree to create batches from.\n      node_names (List[str]): The names of the nodes to create batches for.\n      max_tokens (int): The maximum number of tokens per batch.\n      prompt_size (int): The size of the prompt for each node.\n      response_size_per_node (int): The size of the response for each node.\n      max_batch_size (Optional[int]): The maximum number of nodes per batch.\n      send_background_context (bool): Whether to send background context.\n      send_node_context (bool): Whether to send node context.\n    Returns:\n      List[NodeBatch]: A list of batches of nodes.\n    Examples:\n      >>> create_batches(tree, node_names, max_tokens, prompt_size, response_size_per_node)"
        },
        {
            "comment": "This code defines a function create_batch that takes a tree, maximum number of tokens per batch (max_tokens), size of prompt for each node (prompt_size), optional background context, and other optional parameters. It then returns a NodeBatch object containing the specified data.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":191-216",
            "content": "      [NodeBatch(...), NodeBatch(...)]\n    \"\"\"\n    tree = remove_docstrings(tree, node_names)  # TODO: fix to use Class.method syntax\n    batches = []\n    background = None\n    if send_background_context:\n        background = extract_background(tree)\n    def create_batch():\n        \"\"\"\n        Creates a batch of nodes from a tree.\n        Args:\n          tree (cst.Module): The tree to create batches from.\n          max_tokens (int): The maximum number of tokens per batch.\n          prompt_size (int): The size of the prompt for each node.\n          background (Optional[cst.Module]): The background context for the batch.\n          max_batch_size (Optional[int]): The maximum number of nodes per batch.\n          send_node_context (bool): Whether to send node context.\n        Returns:\n          NodeBatch: A batch of nodes.\n        Examples:\n          >>> create_batch(tree, max_tokens, prompt_size, background, max_batch_size, send_node_context)\n          NodeBatch(...)\n        \"\"\"\n        return NodeBatch(\n            tree=tree,"
        },
        {
            "comment": "This code batches nodes into smaller groups based on a set size limit. It creates batches and appends them to the 'batches' list until it reaches the maximum batch size, then starts a new batch. If a node cannot fit in the current batch due to size limit, it creates a new batch and adds the node to that batch instead.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cst/node_batcher.py\":217-237",
            "content": "            max_tokens=max_tokens,\n            prompt_size=prompt_size,\n            background=background,\n            max_batch_size=max_batch_size,\n            send_node_context=send_node_context,\n        )\n    current_batch = create_batch()\n    for node_name in node_names:\n        node = Node(\n            tree=tree, node_name=node_name, response_size=response_size_per_node\n        )\n        try:\n            current_batch.add(node)\n        except ValueError:\n            # full\n            batches.append(current_batch)\n            current_batch = create_batch()\n            current_batch.add(node)\n    batches.append(current_batch)\n    return batches"
        }
    ]
}