{
    "summary": "The code tests the DocstringAdher class, verifying its functionality to add and remove docstrings from Python functions and classes, handle escape sequences for newlines, and maintain indentation; it also checks if function and method docstrings are added correctly.",
    "details": [
        {
            "comment": "Defines fixtures for testing the docstring adder functionality, including function and class definitions.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/tests/test_cst_docstring_adder.py\":0-41",
            "content": "import pytest\nimport libcst as cst\nfrom write_the.cst.docstring_adder import DocstringAdder, add_docstrings_to_tree\nfrom write_the.cst.utils import has_docstring, get_docstring\n@pytest.fixture\ndef docstrings():\n    return {\n        \"function_name\": \"This is a docstring for a function.\",\n        \"ClassName.method_name\": \"This is a docstring for a method.\",\n    }\n@pytest.fixture\ndef force():\n    return False\n@pytest.fixture\ndef function_def_node():\n    return cst.FunctionDef(\n        name=cst.Name(\"function_name\"),\n        params=cst.Parameters(),\n        body=cst.IndentedBlock(body=[cst.SimpleStatementLine(body=[cst.Pass()])], indent=\"    \"),\n    )\n@pytest.fixture\ndef class_def_node():\n    return cst.ClassDef(\n        name=cst.Name(\"ClassName\"),\n        body=cst.IndentedBlock(body=[cst.SimpleStatementLine(body=[cst.Pass()])]),\n    )\n@pytest.fixture\ndef method_def_node():\n    method_def = cst.FunctionDef(\n        name=cst.Name(\"method_name\"),\n        params=cst.Parameters(params=[cst.Param(name=cst.Name(\"cls\"))]),\n        body=cst.IndentedBlock(body=[cst.SimpleStatementLine(body=[cst.Pass()])]),"
        },
        {
            "comment": "This code contains several test functions that check the functionality of DocstringAdder class. The tests ensure that when a FunctionDef or ClassDef node with a docstring is passed to leave_FunctionDef or leave_ClassDef methods, the updated node has the corresponding docstring added or removed as expected.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/tests/test_cst_docstring_adder.py\":42-69",
            "content": "    )\n    return cst.ClassDef(\n        name=cst.Name(\"ClassName\"),\n        body=cst.IndentedBlock(body=[cst.SimpleStatementLine(body=[method_def])]),\n    )\ndef test_leave_function_def_with_docstring(docstrings, force, function_def_node):\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.leave_FunctionDef(\n        function_def_node, function_def_node\n    )\n    assert has_docstring(updated_node)\ndef test_leave_function_def_without_docstring(docstrings, force, function_def_node):\n    docstrings.pop(\"function_name\")\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.leave_FunctionDef(\n        function_def_node, function_def_node\n    )\n    assert not has_docstring(updated_node)\ndef test_leave_class_def_with_docstring(docstrings, force, class_def_node):\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.leave_ClassDef(class_def_node, class_def_node)\n    assert has_docstring(updated_node) is False"
        },
        {
            "comment": "This code tests the functionality of a DocstringAdder class, which adds or removes docstrings from Python functions and classes. The code includes four test cases:\n1. \"test_leave_class_def_without_docstring\": Removes a docstring for a specific method in a class, then checks if the updated node does not have any docstring.\n2. \"test_leave_method_def_without_docstring\": Similarly to the first test case, but for an entire class definition and a specific method within that class.\n3. \"test_add_docstring_with_docstring\": Adds a docstring to a function or class if it doesn't already have one.\n4. \"test_add_docstring_without_docstring\": Removes a docstring from a function or class if it has one.\nThe code uses the DocstringAdder class and the has_docstring function to perform these tests.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/tests/test_cst_docstring_adder.py\":72-95",
            "content": "def test_leave_class_def_without_docstring(docstrings, force, class_def_node):\n    docstrings.pop(\"ClassName.method_name\")\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.leave_ClassDef(class_def_node, class_def_node)\n    assert not has_docstring(updated_node)\ndef test_leave_method_def_without_docstring(\n    docstrings, force, class_def_node, method_def_node\n):\n    docstrings.pop(\"ClassName.method_name\")\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.leave_ClassDef(class_def_node, class_def_node)\n    updated_node = docstring_adder.leave_FunctionDef(method_def_node, method_def_node)\n    assert not has_docstring(updated_node)\ndef test_add_docstring_with_docstring(docstrings, force, function_def_node):\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.add_docstring(function_def_node)\n    assert has_docstring(updated_node)\ndef test_add_docstring_without_docstring(docstrings, force, function_def_node):"
        },
        {
            "comment": "This code is testing the functionality of a DocstringAdder class. It tests adding docstrings to functions and methods, handling escape sequences for newlines, and preserving indentation in the docstrings.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/tests/test_cst_docstring_adder.py\":96-132",
            "content": "    docstrings.pop(\"function_name\")\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.add_docstring(function_def_node)\n    assert not has_docstring(updated_node)\ndef test_add_docstring_with_force(docstrings, function_def_node):\n    force = True\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.add_docstring(function_def_node)\n    assert has_docstring(updated_node)\ndef test_add_docstring_escape_newline(docstrings, function_def_node):\n    force = True\n    docstrings[\"function_name\"] = \"\"\"\\\\ntest\\ntest\\\\\\\\n\\\\n\"\"\"\n    docstring_adder = DocstringAdder(docstrings, force)\n    updated_node = docstring_adder.add_docstring(function_def_node)\n    assert has_docstring(updated_node)\n    assert (\n        get_docstring(updated_node).strip('\"\"\"').strip()\n        == \"\"\"\\\\\\\\ntest\\n    test\\\\\\\\n\\\\\\\\n\"\"\"\n    )\ndef tree():\n    return cst.parse_module(\n\"\"\"\ndef function_name():\n    pass\nclass ClassName:\n    def method_name():\n        pass\n\"\"\"\n    )\ndef test_add_docstring_indentation():"
        },
        {
            "comment": "Testing if function and method docstrings are added correctly.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/tests/test_cst_docstring_adder.py\":133-154",
            "content": "    docstrings = {\n        \"function_name\": \"\"\"\n        This is a docstring for a function.\n        Args:\n            a (int): The first number to add.\n            b (int): The second number to add.\n        Returns:\n            int: The sum of `a` and `b`.\n        \"\"\",\n        \"ClassName.method_name\": \"\"\"\n        This is a docstring for a method.\n        Args:\n            a (int): The first number to add.\n            b (int): The second number to add.\n        Returns:\n            int: The sum of `a` and `b`.\n        \"\"\",\n    }\n    modified_tree = add_docstrings_to_tree(tree(), docstrings, force=True)\n    code = modified_tree.code\n    assert \"    This is a docstring for a function.\" in  code\n    assert \"        This is a docstring for a method.\" in  code"
        }
    ]
}