{
    "summary": "The `async_cli_task` function asynchronously executes tasks with various arguments, handling exceptions and managing task completion by removing tasks, refreshing progress, and printing or saving results, with an optional pretty output format.",
    "details": [
        {
            "comment": "Function `async_cli_task` takes in several arguments and executes a task asynchronously. It has no return value, but may have side effects.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cli/tasks.py\":0-35",
            "content": "from write_the.commands import write_the_docs\nfrom write_the.utils import create_tree, format_source_code, load_source_code\nfrom rich.syntax import Syntax\nfrom rich.progress import Progress\nfrom typing import List\nfrom pathlib import Path\nfrom openai.error import InvalidRequestError\nasync def async_cli_task(\n    file: Path,\n    nodes: List,\n    force: bool,\n    save: bool,\n    context: bool,\n    background: bool,\n    pretty: bool,\n    batch: bool,\n    print_status: bool,\n    progress: Progress,\n) -> None:\n    \"\"\"\n    Executes a task asynchronously.\n    Args:\n      file (Path): The file to process.\n      nodes (List): The nodes to process.\n      force (bool): Whether to force the task.\n      save (bool): Whether to save the task.\n      context (bool): Whether to include context.\n      pretty (bool): Whether to format the output.\n      batch (bool): Whether to run in batch mode.\n      print_status (bool): Whether to print the status.\n      progress (Progress): The progress object.\n    Returns:\n      None\n    Side Effects:"
        },
        {
            "comment": "This code snippet is part of a task function that takes in various parameters like file, nodes, force, save, etc. It performs different tasks such as writing to a file, printing pass/fail status, and pretty-printing the result if necessary. The code handles exceptions like ValueError or InvalidRequestError and sets the failed variable accordingly.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cli/tasks.py\":36-69",
            "content": "      Writes to the file if save is True.\n      Prints the pass/fail status if print_status is True.\n      Pretty prints the result if pretty is True.\n    Examples:\n      >>> await async_cli_task(file, nodes, force, save, context, pretty, batch, print_status, progress)\n      None\n    \"\"\"\n    task_id = progress.add_task(description=f\"{file}\", total=None)\n    failed = False\n    source_code = load_source_code(file=file)\n    if pretty:\n        source_code = format_source_code(source_code)\n    tree = create_tree(source_code)\n    max_batch_size = None\n    msg = \"\"\n    if batch:\n        max_batch_size = 1\n    try:\n        result = await write_the_docs(\n            tree,\n            node_names=nodes,\n            force=force,\n            save=save,\n            context=context,\n            background=background,\n            pretty=pretty,\n            max_batch_size=max_batch_size,\n        )\n    except ValueError as e:\n        msg = f\" - {e}\"\n        failed = True\n    except InvalidRequestError as e:\n        msg = f\" - {e}\"\n        failed = True"
        },
        {
            "comment": "This code handles the task completion by removing a task, refreshing progress, printing or saving the result based on flags. It also has the option to prettify the output if pretty flag is set.",
            "location": "\"/media/root/Toshiba XG3/works/write-the/docs/src/write_the/cli/tasks.py\":70-89",
            "content": "    progress.remove_task(task_id)\n    progress.refresh()\n    if print_status or save or failed:\n        icon = \"\u274c\" if failed else \"\u2705\"\n        colour = \"red\" if failed else \"green\"\n        progress.print(\n            f\"[not underline]{icon} [/not underline]{file}{msg}\",\n            style=f\"bold {colour} underline\",\n        )\n    if failed:\n        return None\n    if save:\n        with open(file, \"w\") as f:\n            f.writelines(result)\n        return None\n    if pretty:\n        syntax = Syntax(result, \"python\")\n        progress.print(syntax)\n    else:\n        progress.print(result, highlight=False, markup=False)"
        }
    ]
}